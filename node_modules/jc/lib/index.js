module.exports = function (props) {

    var staticProps = props.static || {},
        extendsClass = props.extends || function () {},
        proto = extendsClass.prototype,
        superMethods = [],
        name;

    delete props.static;
    delete props.extends;

    // Save extended methods
    for (name in proto) {
        if (!proto.hasOwnProperty(name)) { continue; }
        if (!(typeof proto[name] === 'function')) { continue; }
        superMethods[name] = proto[name];
    }
    
    // Consctructor
    var Class = function () {
        var self = this,
            sup = {};
        for (name in superMethods) {
            sup[name] = superMethods[name].bind(self);
        }
        self.super = sup;
        self.super.init = self.super.init || function () {};
        self.super.init.apply(self, arguments);
        self.init.apply(self, arguments);
    };
    
    // Extend
    Class.prototype = extendsClass.prototype;
    
    // Properties
    props.init = props.init || function () {};
    for (name in props) {
        if (!props.hasOwnProperty(name)) { continue; }
        Class.prototype[name] = props[name];
    }
    
    // Static properties
    for (name in staticProps) {
        Class[name] = staticProps[name];
    }
    
    return Class;

};