var test = require('tap').test;
var _ = require('underscore');
var Class = require('../lib');

test('Class', function (t) {
    var Person,
        person;
    t.type(Class, 'function');
    Person = Class({
        name: '',
        age: 0,
        init: function (name, age) {
            var self = this;
            self.name = name || self.name;
            self.age = age || self.age;
        },
        getInfo: function () {
            var self = this;
            return self.name + '-' + self.age;
        }
    });
    t.type(Person, 'function');
    person = new Person();
    t.equal(person.name, '');
    t.equal(person.age, 0);
    t.equal(person.getInfo(), '-0');
    person = new Person('MyName', 20);
    t.equal(person.name, 'MyName');
    t.equal(person.age, 20);
    t.equal(person.getInfo(), 'MyName-20');
    t.end();
});

test('Class.static', function (t) {
    var Person = Class({
        init: function () {
            Person.count++;
        },
        static: {
            count: 0,
            getCount: function () {
                var self = this;
                return self.count;
            }
        }
    });
    t.type(Person, 'function');
    t.equal(Person.getCount(), 0);
    new Person();
    new Person();
    t.equal(Person.getCount(), 2);
    t.end();
});

test('Class.extends', function (t) {
    var Person,
        Prorgammer,
        programmer;
    Person = Class({
        name: '',
        age: 0,
        init: function (name, age) {
            var self = this;
            self.name = name || self.name;
            self.age = age || self.age;
        },
        getInfo: function () {
            var self = this;
            return self.name + '-' + self.age;
        },
    });
    Programmer = Class({
        language: '',
        init: function (name, age, language) {
            var self = this;
            self.language = language;
        },
        getInfo: function () {
            var self = this;
            return self.super.getInfo() + '-' + self.language;
        },
        extends: Person
    });
    t.type(Person, 'function');
    t.type(Programmer, 'function');
    programmer = new Programmer('MyName', 20, 'JavaScript');
    t.equal(programmer.name, 'MyName');
    t.equal(programmer.age, 20);
    t.equal(programmer.language, 'JavaScript');
    t.equal(programmer.getInfo(), 'MyName-20-JavaScript');
    t.end();
});