var _ = require('underscore');
var cheerio = require('cheerio');
var Class = require('jc');
var async = require('async');

var Loader = require('./loader');

module.exports = Class({
	
	init: function (options) {
		var self = this;
		self.timeout = options.timeout || 3000;
		self.startURL = options.startURL;
		self.reg = options.reg;
		self.handler = options.handler;
		self.progress = options.progress;
		self.setDefaultSettings();
		self.loader = new Loader({ timeout: self.timeout });
		
		self.result = [];
		self.proceeded = 0;
	},
	
	load: function (callback) {
		var self = this,
			results = {};
			
		self.getLinks(self.startURL, function (links) {
			async.each(_.uniq(links), iterator, done);
		});
		
		function iterator(link, callback) {
			if (results[link]) {
				callback();
				return;
			}
			self.getResult(link, function (result) {
				results[link] = result;
				callback();
			});
		}
		
		function done() {
			callback(_.values(results));
		}
	},
	
	getResult: function (link, callback) {
		var self = this;
		self.loader.get(link, function (content) {
			self.handler(content, function (result) {
				callback({
					url: link,
					result: result
				});
				self.proceeded++;
				self.progress(self.proceeded);
			});
		});
	},
	
	getLinks: function (url, callback) {
		var self = this,
			loader = self.loader,
			links = [];
			
		loader.get(self.startURL, function (content) {
			var $ = cheerio.load(content);
			async.each(_.values($('a')), iterator, done);
		});
		
		function iterator(a, callback) {
			if (!a.attribs) {
				callback();
				return;
			}
			var link = a.attribs.href;
			if (link.charAt(0) === '/') {
				link = self.domain + link.slice(1);
			}
			if (link.search(self.reg) === -1) {
				callback();
				return;
			}
			if (link.search(self.reg) >= 0) {
				links.push(link);
			}
			callback();
		} 
		
		function done () {
			callback(links);
		}
	},
	
	// Implementation ==========================================================
	
	setDefaultSettings: function () {
		var self = this,
			startReg;
		self.domain = self.startURL.split('/').slice(0, 3).join('/') + '/';
		startReg = new RegExp('^' + self.domain.replace(/\:/mg, '\\:').replace(/\//mg, '\\/').replace(/\./mg, '\\.').replace(/\-/mg, '\\-'));
		self.reg = self.reg || startReg;
		self.handler = self.handler || function (content, callback) {
			callback(content);
		};
		self.progress = self.progress || function () {};
	},
	
});